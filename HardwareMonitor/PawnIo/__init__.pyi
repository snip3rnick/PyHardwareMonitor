from HardwareMonitor.Hardware import GroupAffinity
from HardwareMonitor._util.types import Byte, Int64, UInt32, UInt64
from typing import Set, Tuple, overload


class AmdFamily0F:
    def __init__(self): ...
    def Close(self) -> None: ...
    def GetThermtrip(self, cpuIndex: int, coreIndex: UInt32) -> UInt32: ...
    @overload
    def ReadMsr(self, index: UInt32) -> Tuple[bool, UInt32, UInt32]: ...
    @overload
    def ReadMsr(self, index: UInt32, affinity: GroupAffinity) -> Tuple[bool, UInt32, UInt32]: ...


class AmdFamily10:
    def __init__(self): ...
    def Close(self) -> None: ...
    def HaveCstateResidencyInfo(self) -> bool: ...
    def MeasureTscMultiplier(self) -> Tuple[Int64, Int64]: ...
    def ReadCstateResidency(self) -> Set[Byte]: ...
    def ReadMiscCtl(self, cpu: int, offset: UInt32) -> UInt32: ...
    @overload
    def ReadMsr(self, index: UInt32) -> Tuple[bool, UInt32, UInt32]: ...
    @overload
    def ReadMsr(self, index: UInt32, affinity: GroupAffinity) -> Tuple[bool, UInt32, UInt32]: ...
    def ReadSmu(self, offset: UInt32) -> UInt32: ...


class AmdFamily17:
    def __init__(self): ...
    def Close(self) -> None: ...
    @overload
    def ReadMsr(self, index: UInt32) -> Tuple[bool, UInt64]: ...
    @overload
    def ReadMsr(self, index: UInt32) -> Tuple[bool, UInt32, UInt32]: ...
    def ReadSmn(self, offset: UInt32) -> UInt32: ...


class IntelMsr:
    def __init__(self): ...
    def Close(self) -> None: ...
    @overload
    def ReadMsr(self, index: UInt32) -> Tuple[bool, UInt64]: ...
    @overload
    def ReadMsr(self, index: UInt32) -> Tuple[bool, UInt32, UInt32]: ...
    @overload
    def ReadMsr(self, index: UInt32, affinity: GroupAffinity) -> Tuple[bool, UInt32, UInt32]: ...


class LpcAcpiEc:
    def __init__(self): ...
    def Close(self) -> None: ...
    def ReadPort(self, port: Byte) -> Byte: ...
    def WritePort(self, port: Byte, value: Byte) -> None: ...


class PawnIo:
    def __init__(self): ...
    def Close(self) -> None: ...
    def Execute(self, name: str, input: Set[Int64], outLength: int) -> Set[Int64]: ...
    def ExecuteHr(self, name: str, inBuffer: Set[Int64], inSize: UInt32, outBuffer: Set[Int64], outSize: UInt32) -> Tuple[int, UInt32]: ...
    @property
    def InstallPath() -> str: ...
    @property
    def IsInstalled() -> bool: ...
    def LoadModuleFromResource(assembly: Assembly, resourceName: str) -> PawnIo: ...
    def Version() -> Version: ...


class RyzenSmu:
    def __init__(self): ...
    def Close(self) -> None: ...
    def GetCodeName(self) -> Int64: ...
    def GetSmuVersion(self) -> UInt32: ...
    def ReadPmTable(self, size: int) -> Set[Int64]: ...
    def ResolvePmTable(self) -> Tuple[UInt32, UInt32]: ...
    def UpdatePmTable(self) -> None: ...
